{"version":3,"sources":["pages/Home.tsx","pages/About.tsx","pages/Contact.tsx","pages/NotFound.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","About","href","target","rel","Contact","NotFound","App","Main","exact","path","component","Navigation","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAEaA,EAAO,kBAChB,yBAAKC,UAAU,QACb,qCCFOC,EAAQ,kBACjB,yBAAKD,UAAU,SACb,wCACA,kFAAuD,uBACnDA,UAAU,WACVE,KAAK,+CACLC,OAAO,SACPC,IAAI,uBAJ+C,qBAAvD,OCHOC,EAAU,kBACnB,yBAAKL,UAAU,WACb,0CACA,2BAAG,gECHIM,EAAW,kBACpB,yBAAKN,UAAU,YACb,qCCcSO,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,uCACA,kBAAC,EAAD,QAOAQ,EAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,SAASC,UAAWV,IACtC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,WAAWC,UAAWN,IACxC,kBAAC,IAAD,CAAOM,UAAWL,MAIhBM,EAAa,kBACjB,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAASC,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,eCtBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e1d70780.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Home = () => (\r\n    <div className='home'>\r\n      <h1>...</h1>\r\n    </div>\r\n  );","import React from 'react';\r\n\r\nexport const About = () => (\r\n    <div className='about'>\r\n      <h1>About Me</h1>\r\n      <p>Softare engineer currently at Microsoft, working on <a\r\n          className=\"App-link\"\r\n          href=\"https://github.com/microsoft/azuredatastudio\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Azure Data Studio\r\n        </a>.</p>\r\n    </div>\r\n  );","import React from 'react';\r\n\r\nexport const Contact = () => (\r\n    <div className='contact'>\r\n      <h1>Contact Me</h1>\r\n      <p><strong>benjin.dubishar@gmail.com</strong></p>\r\n    </div>\r\n  );","import React from 'react';\r\n\r\nexport const NotFound = () => (\r\n    <div className='notFound'>\r\n      <h1>404</h1>\r\n    </div>\r\n  );","import React from 'react';\nimport './App.css';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport { Home } from './pages/Home';\nimport { About } from './pages/About';\nimport { Contact } from './pages/Contact';\nimport { NotFound } from './pages/NotFound';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <h1>benj.in</h1>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n\nconst Main = () => (\n  <Switch>\n    <Route exact path='/' component={Home}></Route>\n    <Route exact path='/about' component={About}></Route>\n    <Route exact path='/contact' component={Contact}></Route>\n    <Route component={NotFound}></Route>\n  </Switch>\n);\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li><NavLink to='/'>Home</NavLink></li>\n      <li><NavLink to='/about'>About</NavLink></li>\n      <li><NavLink to='/contact'>Contact</NavLink></li>\n    </ul>\n  </nav>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}